---
name: Build, Deploy to GitHub Pages and Deploy PR Preview
author: WATAHIKI Yuto
description: This action builds a project and deploys it to GitHub Pages and also deploys PR preview automatically.
inputs:
  type:
    description: Type of the project(Other settings will be automatically set for the type of the project. Currently only `vite` and `docusaurus` are supported.)
    required: true
  package-manager:
    description: Package manager to use(`npm`, `yarn` or `pnpm`)
    required: false
    default: npm
  rootDir:
    description: Root directory of the project(Default is the current directory)
    required: false
    default: .
  folder:
    description: Folder that contains the built files(If set to `auto`, it will use the default folder for the type of the project.)
    required: false
    default: auto
  pr-preview:
    description: Whether to deploy PR Preview(`true` or `false`)
    required: false
    default: true
  production-branch:
    description: Branch that contains the production code(Default is `main` or `master`)
    required: false
  development-branch:
    description: Branch that contains the development code(This can be multiple branches. If you want to specify multiple branches, separate them with a newline.)
    required: false
  deployment-branch:
    description: Branch that the project will be deployed to
    required: false
    default: gh-pages
  umbrella-dir:
    description: Directory that will contain all previews
    required: false
    default: pr-preview
  custom-url:
    description: Custom URL to deploy
    required: false

runs:
  using: composite
  steps:
    - name: Determine the Folder to Deploy
      id: folder
      uses: actions/github-script@v6
      with:
        script: |
          const typeInput = "${{ inputs.type }}";
          const folderInput = "${{ inputs.folder }}";
          if (folderInput === "auto") {
            if (typeInput === "vite") {
              return "dist";
            } else if (typeInput === "docusaurus") {
              return "build";
            }
          } else {
            return folderInput;
          }
        result-encoding: string

    - name: Determine the Production Branch
      id: production-branch
      uses: actions/github-script@v6
      with:
        script: |
          const productionBranchInput = "${{ inputs.production-branch }}";
          if (productionBranchInput === "") {
            if ("${{ github.event_name }}" === "push" && "${{ github.ref_name }}" === "master") {
              return "master";
            } else {
              return "main";
            }
          } else {
            return productionBranchInput;
          }
        result-encoding: string

    - name: Determine the Base URL
      id: base-url
      env:
        DEVELOPMENT_BRANCHES: ${{ inputs.development-branch }}
      uses: actions/github-script@v6
      with:
        script: |
          const githubEventName = "${{ github.event_name }}";
          const githubRepositoryOwner = "${{ github.repository_owner }}"; // owner
          const githubRepositoryName = "${{ github.event.repository.name }}"; // repo
          const repositoryBaseUrl = githubRepositoryName === `${githubRepositoryOwner}.github.io` || "${{ inputs.custom-url }}" !== "" ? "" : `/${githubRepositoryName}`; // "" or /<repo>
          if (githubEventName === "push") {
            const githubBranchName = "${{ github.ref_name }}"; // branch
            const developmentBranches = process.env.DEVELOPMENT_BRANCHES.split("\n");
            // base URL of the production site
            if (githubBranchName === "${{ steps.production-branch.outputs.result }}") {
              const baseUrl = repositoryBaseUrl;
              return baseUrl; // /<repo>
            }
            // base URL of the development site
            else if (developmentBranches.includes(githubBranchName)) {
              const baseUrl = `${repositoryBaseUrl}/${githubBranchName}`;
              return baseUrl; // /<repo>/<branch>
            }
          } else if (githubEventName === "pull_request") {
            const prNumber = "${{ github.event.number }}"; // pr-number
            const baseUrl = `${repositoryBaseUrl}/pr-preview/pr-${prNumber}`;
            return baseUrl; // /<repo>/pr-preview/pr-<pr-number>
          }
        result-encoding: string

    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Setup pnpm
      if: ${{ inputs.package-manager == 'pnpm' }}
      uses: pnpm/action-setup@v2
      with:
        version: latest

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: latest
        cache: ${{ inputs.package-manager }}
        cache-dependency-path: ${{ inputs.rootDir }}/${{ (inputs.package-manager == 'npm') && 'package-lock.json' || (inputs.package-manager == 'yarn') && 'yarn.lock' || (inputs.package-manager == 'pnpm') && 'pnpm-lock.yaml' }}

    - name: Install Packages with npm
      if: ${{ inputs.package-manager == 'npm' }}
      working-directory: ${{ inputs.rootDir }}
      run: npm ci
      shell: bash

    - name: Install Packages with yarn
      if: ${{ inputs.package-manager == 'yarn' }}
      working-directory: ${{ inputs.rootDir }}
      run: yarn install --frozen-lockfile
      shell: bash

    - name: Install Packages with pnpm
      if: ${{ inputs.package-manager == 'pnpm' }}
      working-directory: ${{ inputs.rootDir }}
      run: pnpm install --frozen-lockfile
      shell: bash

    - name: Determine Executable Command
      id: executable-command
      uses: actions/github-script@v6
      with:
        script: |
          const packageManager = "${{ inputs.package-manager }}";
          if (packageManager === "npm") {
            return "npx";
          } else if (packageManager === "yarn") {
            return "yarn";
          } else if (packageManager === "pnpm") {
            return "pnpx";
          }
        result-encoding: string

    - name: Build Vite Project
      if: ${{ inputs.type == 'vite' }}
      working-directory: ${{ inputs.rootDir }}
      run: ${{ steps.executable-command.outputs.result }} vite build --base ${{ steps.base-url.outputs.result }}/
      shell: bash

    - name: Build Docusaurus Project
      if: ${{ inputs.type == 'docusaurus' }}
      env:
        BASE_URL: ${{ steps.base-url.outputs.result }}
      working-directory: ${{ inputs.rootDir }}
      run: ${{ steps.executable-command.outputs.result }} docusaurus build
      shell: bash

    - name: Deploy Production to GitHub Pages
      if: ${{ github.event_name == 'push' && github.ref_name == steps.production-branch.outputs.result }}
      uses: JamesIves/github-pages-deploy-action@v4
      with:
        folder: ${{ inputs.rootDir }}/${{ steps.folder.outputs.result }}
        clean-exclude: |
          ${{ inputs.umbrella-dir }}
          ${{ inputs.development-branch }}

    - name: Deploy Development to GitHub Pages
      if: ${{ github.event_name == 'push' && contains(inputs.development-branch, github.ref_name) }}
      uses: JamesIves/github-pages-deploy-action@v4
      with:
        folder: ${{ inputs.rootDir }}/${{ steps.folder.outputs.result }}
        target-folder: ${{ github.ref_name }}

    - name: Deploy PR Preview
      if: ${{ github.event_name == 'pull_request' && inputs.pr-preview == 'true' }}
      uses: rossjrw/pr-preview-action@v1
      with:
        source-dir: ${{ inputs.rootDir }}/${{ steps.folder.outputs.result }}
        preview-branch: ${{ inputs.deployment-branch }}
        umbrella-dir: ${{ inputs.umbrella-dir }}
        custom-url: ${{ inputs.custom-url }}

branding:
  icon: git-branch
  color: gray-dark
